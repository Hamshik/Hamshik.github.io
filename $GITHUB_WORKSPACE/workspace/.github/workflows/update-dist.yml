name: Ultra-Enhanced Development Workflow

on:
  push:
    branches:
      - main
    paths:
      - "dist/**"
      - ".github/**"
  pull_request:
    paths:
      - "dist/**"
      - ".github/**"
  schedule:
    - cron: "0 1 * * 0" # Runs weekly on Sunday at 1 AM UTC
  workflow_dispatch: # Allow manual execution

jobs:
  develop-and-secure:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      actions: write
      security-events: write
      pull-requests: write

    env:
      WORKING_DIRECTORY: $GITHUB_WORKSPACE/workspace
      TARGET_BRANCH: main
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      WORKFLOW_DIR: /home/runner/work/hamshik/hamshik.github.io/workflow

    steps:
      # Step 1: Checkout Repository
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Ensures full history is fetched for accurate audits

      # Step 2: Set Up Environment and /workflow Directory
      - name: Set Up Workspace and Workflow Directory
        run: |
          echo "Preparing custom working directory..."
          mkdir -p $WORKING_DIRECTORY
          mkdir -p $WORKFLOW_DIR
          chmod -R 755 $WORKFLOW_DIR
          # Clear destination directory first to avoid conflicts
          rm -rf $WORKING_DIRECTORY/dist 
          rm -rf $WORKING_DIRECTORY/.github
          # Move files/directories
          mv dist/ $WORKING_DIRECTORY/  
          mv .github/ $WORKING_DIRECTORY/
          echo "Workspace and workflow directory are ready."

      # Step 3: Security Dependency Check
      - name: Set Node.js Version
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Audit Dependencies for Security Issues
        run: |
          echo "Auditing dependencies for known vulnerabilities..."
          cd $WORKING_DIRECTORY/dist
          npm ci # Installs dependencies
          npm audit --json > $WORKFLOW_DIR/audit-report.json || echo "Vulnerabilities found."
          cat $WORKFLOW_DIR/audit-report.json
        continue-on-error: true

      # Step 4.0.1: Installing Required Dependencies
      - name: Installing Required Dependencies
        run: |
          echo "Installing compatible dependencies..."
          npm install eslint@8.2.0 --save-dev
          npm install eslint-config-airbnb@19.0.4 --save-dev
          npm install eslint-config-standard --save-dev
          npm install eslint-plugin-react --save-dev
          npm install eslint-plugin-import --save-dev
          npm install prettier --save-dev
          npm install eslint-plugin-prettier eslint-config-prettier --save-dev
          echo "Dependencies installed successfully."

      # Step 4.0.2: Reinitialize ESLint
      - name: Initialize ESLint
        run: |
          echo "Initializing ESLint..."
          npx eslint --init
          echo "ESLint initialization completed."

      # Step 4: Linting JavaScript
      - name: Lint JavaScript Files (dist/)
        run: |
          echo "Running linter on dist directory..."
          npm run lint > $WORKFLOW_DIR/lint-output.txt || echo "Linting failed but continuing workflow."

      # Step 5: Validate YAML for Workflows
      - name: Validate .github Workflows
        run: |
          echo "Validating YAML syntax for workflows..."
          find $WORKING_DIRECTORY/.github/workflows -type f -name "*.yml" -exec yamllint {} \;
          echo "YAML validation completed." > $WORKFLOW_DIR/yaml-validation.txt

      # Step 6: Generate Checksums for dist files
      - name: Generate Checksums
        run: |
          find dist -type f -exec sha256sum {} + > $WORKFLOW_DIR/checksums.txt || exit 0

      # Step 7: Security Scan on Repository
      - name: Run ClamAV Security Scan
        run: |
          echo "Running security scan on repository..."
          sudo apt-get update
          sudo apt-get install -y clamav
          clamscan -r $WORKING_DIRECTORY > $WORKFLOW_DIR/security-scan.log
          echo "Security scan completed. Log stored in $WORKFLOW_DIR."

      # Step 8: Detect Changes
      - name: Detect Changes
        id: detect_changes
        run: |
          echo "Checking for changes in dist and .github directories..."
          cd $WORKING_DIRECTORY
          CHANGES=$(git status --porcelain | grep -E "dist/|.github/")
          echo "::set-output name=changes::$CHANGES"
          if [ -z "$CHANGES" ]; then
            echo "No changes detected. Exiting workflow."
            exit 0
          else
            echo "Changes detected in: $CHANGES"
          fi

      # Step 9: Commit and Push Changes
      - name: Commit and Push Updates
        if: steps.detect_changes.outputs.changes != ''
        run: |
          echo "Staging and committing changes..."
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          cd $WORKING_DIRECTORY
          git add dist/ .github/
          git commit -m "Enhanced update: Build and secure dist/.github"
          git push origin $TARGET_BRANCH

      # Step 10: Notifications
      - name: Notify Stakeholders
        run: |
          CHANGES="${{ steps.detect_changes.outputs.changes }}"
          if [ -z "$CHANGES" ]; then
            curl -X POST -H "Content-Type: application/json" \
              -d '{"text":"No updates for dist or .github directories."}' \
              $SLACK_WEBHOOK || echo "Failed to send Slack notification for no updates."
          else
            curl -X POST -H "Content-Type: application/json" \
              -d '{"text":"Enhanced update: dist and .github directories have been updated and secured."}' \
              $SLACK_WEBHOOK || echo "Failed to send Slack notification for updates."
          fi

      # Step 11: Generate and Upload Logs
      - name: Generate Audit Logs
        run: |
          echo "Generating detailed audit logs..."
          cd $WORKING_DIRECTORY
          git log -p dist/ .github/ > $WORKFLOW_DIR/audit.log
          echo "Audit logs saved at $WORKFLOW_DIR/audit.log."

      - name: Upload Logs
        uses: actions/upload-artifact@v4
        with:
          name: audit-logs
          path: $WORKFLOW_DIR/audit.log
